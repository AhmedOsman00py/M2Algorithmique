"0",""
"0","cppFunction('"
"0",""
"0","void dijkstra(NumericMatrix graph, int source, int dest) { "
"0","    int D = dest;"
"0","    dest = dest-1;"
"0","    int V = graph.nrow();"
"0","    source = source - 1;"
"0","    "
"0","    NumericVector dist(V); "
"0",""
"0","      "
"0","    LogicalVector visited(V);  "
"0",""
"0","     "
"0","    for (int i = 0; i < V; i++) { "
"0",""
"0","        dist[i] = INT_MAX; "
"0",""
"0","        visited[i] = false;  "
"0",""
"0","    }  "
"0",""
"0","   "
"0","    dist[source] = 0;  "
"0",""
"0","      "
"0",""
"0","    for (int count = 0; count < V - 1; count++) {    "
"0",""
"0","          "
"0",""
"0","        int min = INT_MAX, min_index;    "
"0",""
"0","        for (int v = 0; v < V; v++)     {        "
"0",""
"0","            if (visited[v] == false && dist[v] <= min)         {            "
"0",""
"0","                min = dist[v];            "
"0",""
"0","                min_index = v;         "
"0","            }     "
"0","        }     "
"0","           "
"0","        visited[min_index] = true;      "
"0","             "
"0","        for (int v = 0; v < V; v++)      {         "
"0","            if (!visited[v] && graph(min_index, v) && dist[min_index] != INT_MAX && dist[min_index]+graph(min_index , v) < dist[v])          {             "
"0","                dist[v] = dist[min_index] + graph(min_index,v);         "
"0","                }      "
"0","        } "
"0","    }   "
"0","        "
"0","    "
"0",""
"0","   "
"0","    if(dest!=source and dist[dest]!=INT_MAX){"
"0","        std::vector<int> path ; "
"0","        "
"0","        path.push_back(dest); "
"0","        while(dest!=source){ "
"0","            for(int i=0 ; i<V ; i++){ "
"0","                if(graph(i,dest) !=0 && dist[dest] - graph(i,dest) == dist[i]){ "
"0","                    path.push_back(i); "
"0","                    dest = i ; "
"0","                    break; "
"0","                    }"
"0","                } "
"0","        }"
"0","        "
"0","        Rcpp::Rcout<<""Le plus court chemin entre ""<<source + 1<<"" et ""<< D  <<"" est : ""; "
"0","        while (!path.empty()) { "
"0","            Rcpp::Rcout<<path.back() + 1 <<""  ""; "
"0","        "
"0","            path.pop_back();"
"0","        }"
"0","        Rcpp::Rcout<< "" et distant de : ""<<dist[D]<<std::endl;"
"0","        "
"0","    }"
"0","    if(dist[dest] == INT_MAX){"
"0","        Rcpp::Rcout<<""pas de chemin possible entre ""<< source + 1 <<"" et "" << dest ;"
"0","    }"
"0","    "
"0","    return ;"
"0","    "
"0","    "
"0","    "
"0","} "
"0",""
"0","')"
